<!DOCTYPE html>
<html lang="en-US" prefix="og: http://ogp.me/ns#">
    {% include "head" %}
    {% include "body" %}
    {% include "footerScripts" %}

    <script type="text/javascript">
        let fuzzySearchOptions = {
            shouldSort: true,
            includeScore: false,
            tokenize: true,
            matchAllTokens: true,
            threshold: 0.1,
            location: 0,
            distance: 100,
            maxPatternLength: 32,
            minMatchCharLength: 1,
            keys: [
                "title"
            ]
        };

        sortByTitle = function(boardGame1, boardGame2) {
            return boardGame1.title.localeCompare(boardGame2.title);
        };

        let socket = io.connect();

        /**
         * Default to hidden, otherwise we'll temporarily "flash" it on screen even if
         * there is no initial fetch occuring (which is the ONLY time we want to
         * show a loading spinner). We'll instead immediately check with the server
         * to see if there's initial fetch occurring. If there is, THEN we show it.
         */
        let boardGames = [];
        let fuse = null;
        let boardGamesApp = new Vue({
            el: "#board-games",
            delimiters: ["${", "}"],
            data: {
                "boardGames": boardGames,
                "theSpinner": true,
                "searchString": "",
                initialLoadInProgress: false,
                documentReady: false,
                loadingSpinnerVisible: false,
            },
            computed: {
                sortedAndSearchedBoardGames() {
                    if (!this.searchString) {
                        return this.boardGames.sort(sortByTitle);
                    } else {
                        return fuse.search(this.searchString).sort(sortByTitle);
                    }
                }
            },
            updated: function() {
                VanillaTilt.init(document.querySelectorAll(".wrapper"));
            }
        });

        let bufferedSearchString = "";
        document.getElementById("search").oninput = function(event) {
            bufferedSearchString = event.srcElement.value.trim();
            setTimeout(function() {
                boardGamesApp.searchString = bufferedSearchString;
            }, 1000);
        }

        socket.on("connect", function() {
            /**
             * So we don't have the collection flash when status changes.
             */
            let isFirstCheck = true;
            socket.emit("{{ initialFetchInProgress }}");
            socket.on("{{ initialFetchInProgress }}", function(inProgress) {
                if (isFirstCheck) {
                    boardGamesApp.initialLoadInProgress = inProgress;
                }
                boardGamesApp.loadingSpinnerVisible = inProgress;
                isFirstCheck = false;
            });

            // Request the server send the client the "board games" cache
            socket.emit("{{ getAllItems }}");
            socket.on("{{ getAllItems }}", function(data) {
                if (boardGames.length == 0 && data && data.length > 0) {
                    for (let boardGame of data) {
                        boardGames.push(boardGame);
                    }
                    fuse = new Fuse(boardGames, fuzzySearchOptions);
                    boardGamesApp.documentReady = true;
                }
            });

            socket.on("{{ addItem }}", function(newBoardGame) {
                if (newBoardGame) {
                    boardGames.push(newBoardGame);
                    fuse = new Fuse(boardGames, fuzzySearchOptions);
                }
            });
            socket.on("{{ updateItem }}", function(updatedBoardGame) {
                if (updatedBoardGame) {
                    let indexOfBoardGameToUpdate = -1;
                    for (let i = 0; i < boardGames.length; i++) {
                        let boardGame = boardGames[i];
                        if (boardGame._id === updatedBoardGame._id) {
                            indexOfBoardGameToUpdate = i;
                            break;
                        }
                    }
                    boardGames[indexOfBoardGameToUpdate] = updatedBoardGame;
                }
            });
            socket.on("{{ removeItem }}", function(removedBoardGame) {
                if (removedBoardGame) {
                    let indexOfBoardGameToRemove = -1;
                    for (let i = 0; i < boardGames.length; i++) {
                        let boardGame = boardGames[i];
                        if (boardGame._id === removedBoardGame._id) {
                            indexOfBoardGameToRemove = i;
                            break;
                        }
                    }
                    boardGames.splice(indexOfBoardGameToRemove, 1);
                }
            });
        })
    </script>
</html>